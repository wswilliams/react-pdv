version: '3.8'
services:

  app-client:
    build: 
     dockerfile: ./server/Dockerfile
     context: ./
    image:  pdv/front
    container_name: front-client
    ports:
      - 3001:80
    volumes:
      - ./:/app/
    stdin_open: true
    tty: true
    depends_on:
      - api-service
    restart: unless-stopped
    networks:
      - netApi

  api-service:
    build:
      dockerfile: ./api-server/Dockerfile
      context: ./
    image:  pdv/backend
    container_name: api-server
    command: bash -c "npm i && npm start"
    user: root
    env_file:
      - ./api-server/.env
    environment:
      TZ: $TZ
      NODE_ENV: development
    working_dir: /app
    restart: unless-stopped
    depends_on: 
      - postgres_dev
    ports: 
      - 3355:3355
    volumes: 
      - ./api-server:/app
    networks:
      - netApi
   
  postgres_dev:
    container_name: postgres_container
    image: postgres
    restart: unless-stopped
    environment:
       POSTGRES_USER: postgres
       POSTGRES_PASSWORD: postgres
       POSTGRES_DB: postgres
       DATABASE_PORT: 5432
       POSTGRES_HOST: 'localhost'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - netApi
  #mysqldb:
 #   image: mysql:5.7
 #   container_name: mysqldb
 #   restart: unless-stopped
 #   environment:
 #      MYSQL_DATABASE: pdv
 #      MYSQL_ROOT_PASSWORD: 123456
 #      MYSQL_USER: pdv
 #      MYSQL_PASSWORD: 123456
 #      MYSQL_ROOT_HOST: '%'
 #   ports:
 #     - 3306:3306
 #   volumes:
 #     - ./db:/var/lib/mysql
 #     - ./api-server/create_data_base.sql:/docker-entrypoint-initdb.d/create_data_base.sql
 #   command: mysqld --init-file="/docker-entrypoint-initdb.d/create_data_base.sql"
 #   networks:
 #     - netApi

volumes:
  postgres_data:

networks:
  netApi:
    driver: bridge